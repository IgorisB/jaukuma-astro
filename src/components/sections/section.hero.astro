---
import ControlNavbarDesktop from '../controls/control.navbar.desktop.astro';
import ControlNavbarMobile from '../controls/control.navbar.mobile.astro';
import ControlStickyHeaderMobile from '../controls/control.sticky-header.mobile.astro';
import { useTranslations, getLangFromUrl } from '../../lib/utils';
const lang = Astro.props.locale || getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section class="hero-section parallax-hero">
  <!-- Parallax Background Layer -->
  <div class="parallax-background" style="background-image: linear-gradient(rgba(50, 62, 72, 0.6), rgba(50, 62, 72, 0.6)), url('/images/hero-background.jpg')"></div>
  
  <!-- Parallax Content Layer -->
  <div class="parallax-content">
    <!-- Navigation Bar -->
    <ControlNavbarDesktop locale={lang} />
    <ControlNavbarMobile locale={lang} />
    
    <!-- Sticky Mobile Header -->
    <ControlStickyHeaderMobile locale={lang} />
    
    <!-- Hero Content -->
    <div class="hero-content">
        <p class="main-title color-white" set:html={t('section.hero.slogan')}></p>
        <h1 class="hidden">{t('section.hero.title')}</h1>
        <p class="description color-white" set:html={t('section.hero.description')}></p>
        <a href="/services" class="button-primary-light">
          {t('section.hero.button')}
        </a>
    </div>
    <a href="#about" class="scroll-down">
      <img src="/images/down-arrow-circle.svg" alt="Scroll Down" />
    </a>
  </div>
</section>

<script is:inline>
  // Initialize parallax when document is ready
  function initParallax() {
    const parallaxHero = document.querySelector('.parallax-hero');
    const parallaxBackground = document.querySelector('.parallax-background');
    
    if (parallaxHero && parallaxBackground) {
      function updateParallax() {
        const scrollY = window.pageYOffset || window.scrollY || document.documentElement.scrollTop;
        const heroRect = parallaxHero.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        
        // Calculate if hero is in viewport
        const isInViewport = heroRect.bottom > 0 && heroRect.top < windowHeight;
        
        if (isInViewport) {
          // Simple parallax calculation
          const parallaxOffset = scrollY * 0.3;
          parallaxBackground.style.transform = `translate3d(0, ${parallaxOffset}px, 0)`;
        }
      }
      
      // Add event listener
      window.addEventListener('scroll', updateParallax, { passive: true });
      
      // Initial call
      updateParallax();
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initParallax);
  } else {
    initParallax();
  }
  
  // Backup initialization on window load
  window.addEventListener('load', initParallax);
</script>
<style>
  .hero-section {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    color: white;
    padding: 2.25rem 9rem 9rem 9rem;
    gap: 9rem;
    /* Remove background styles - now handled by parallax-background */
  }

  /* Parallax content maintains flex layout */
  .parallax-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 9rem;
    width: 100%;
    height: 100%;
  }

  /* Hero Content */
  .hero-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    margin: 0 auto;
    gap: 40px;
    text-align: center;
  }

  /* Media queries */
  @media (min-width: 1024px) {
    .hero-section {
      padding: 2.25rem 9rem 9rem 9rem;
    }
  } 

  @media (min-width: 768px) and (max-width: 1024px) {
    .hero-section {
      padding: 1.5rem 3rem;
    }
  }

  @media (max-width: 768px) {
    .hero-section {
      padding: 0.75rem 1.5rem 1.5rem 1.5rem;
    }
  }
</style>
