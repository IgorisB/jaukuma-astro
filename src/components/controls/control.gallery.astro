---
export interface GalleryItem {
  imageRef: string;
  imageTitle: string;
  imageDescription: string;
}

export interface Props {
  items: GalleryItem[];
  showNavigation?: boolean;
  class?: string;
}

const { items, showNavigation = true, class: className = '' } = Astro.props;
---

<div class={`gallery-control ${className}`}>
  <!-- Navigation arrows -->
  {showNavigation && (
    <div class="navigation">
      <button class="nav-arrow nav-prev" aria-label="Previous" data-direction="prev">
        <img src="/images/nav-arrow-left.svg" alt="Previous" width="29" height="29" class="nav-arrow-img" />
      </button>
      <button class="nav-arrow nav-next" aria-label="Next" data-direction="next">
        <img src="/images/nav-arrow-right.svg" alt="Next" width="29" height="29" class="nav-arrow-img" />
      </button>
    </div>
  )}

  <!-- Gallery images -->
  <div class="gallery-container">
    <div class="gallery" id="gallery-scroll">
      {items.map((item, index) => (
        <div class="gallery-item">
          <div class="image-container">
            <img src={item.imageRef} alt={item.imageTitle} class="gallery-image" />
          </div>
          <h3 class="image-title hidden">{item.imageTitle}</h3>
          <p class="image-description hidden">{item.imageDescription}</p>
        </div>
      ))}
    </div>
  </div>
</div>

<script>
  class GalleryController {
    private gallery: HTMLElement | null;
    private navButtons: NodeListOf<Element>;

    constructor() {
      this.gallery = document.getElementById('gallery-scroll');
      this.navButtons = document.querySelectorAll('.nav-arrow');
      this.init();
    }

    init(): void {
      if (!this.gallery) return;
      
      this.navButtons.forEach((button: Element) => {
        button.addEventListener('click', (e: Event) => this.handleNavigation(e));
      });
    }

    handleNavigation(event: Event): void {
      const target = event.currentTarget as HTMLElement;
      const direction = target.dataset.direction;
      const scrollAmount = this.getScrollAmount();
      
      if (!this.gallery) return;
      
      if (direction === 'next') {
        this.gallery.scrollBy({
          left: scrollAmount,
          behavior: 'smooth'
        });
      } else if (direction === 'prev') {
        this.gallery.scrollBy({
          left: -scrollAmount,
          behavior: 'smooth'
        });
      }
    }

    getScrollAmount(): number {
      if (!this.gallery) return 300;
      
      // Get the computed gap from CSS
      const computedStyle = window.getComputedStyle(this.gallery);
      const gap = parseInt(computedStyle.gap) || 20;
      
      // Get the first gallery item
      const firstItem = this.gallery.querySelector('.gallery-item') as HTMLElement;
      if (firstItem) {
        const itemWidth = firstItem.offsetWidth;
        const scrollAmount = itemWidth + gap;
        
        // Debug logging
        console.log('Gallery scroll debug:', {
          itemWidth,
          gap,
          scrollAmount,
          totalWidth: this.gallery.scrollWidth,
          visibleWidth: this.gallery.clientWidth
        });
        
        // Return item width + gap to ensure we scroll exactly one item width
        return scrollAmount;
      }
      
      return 300; // fallback width
    }
  }

  // Initialize gallery controller when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new GalleryController();
  });
</script>

<style>
  .gallery-control {
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 1rem;
    flex: 1;
    position: relative;
    max-width: 100%;
    box-sizing: border-box;
    overflow: hidden;
  }

  .navigation {
    display: flex;
    justify-content: right;
    width: 100%;
    position: relative;
    padding-right: 2rem;
    gap: 1rem;
    top: 0;
    max-width: 100%;
    box-sizing: border-box;
  }

  .nav-arrow {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    width: 1.786rem;
    height: 1.786rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 0.3s ease;
  }

  .nav-arrow:hover {
    opacity: 0.8;
  }

  /* Hover and active states for navigation arrows */
  .nav-arrow.nav-prev:hover .nav-arrow-img,
  .nav-arrow.nav-prev:active .nav-arrow-img {
    content: url('/images/nav-arrow-left-hover.svg');
  }

  .nav-arrow.nav-next:hover .nav-arrow-img,
  .nav-arrow.nav-next:active .nav-arrow-img {
    content: url('/images/nav-arrow-right-hover.svg');
  }

  .gallery-container {
    overflow: hidden;
    width: 100%;
  }

  .gallery {
    display: flex;
    gap: 1.25rem;
    justify-content: left;
    align-items: center;
    align-self: stretch;
    overflow-x: auto;
    scroll-behavior: smooth;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
    padding-bottom: 0.5rem; /* Space for potential scrollbar */
  }

  .gallery::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }

  .gallery-item {
    display: flex;
    flex-direction: column;
    gap: 0.3125rem;
    width: 18rem; /* Fixed width for proper scrolling */
    flex-shrink: 0; /* Prevent items from shrinking */
  }

  .image-container {
    width: 18rem;
    height: 25.94rem;
    border-radius: 10rem 10rem 0 0;
    overflow: hidden;
    background: #D9D9D9;
  }

  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 9.375rem 9.375rem 0 0;
  }

  .image-title {
    font-family: 'Playfair Display', serif;
    font-weight: 400;
    font-size: 0.875rem;
    line-height: 1.333;
    color: #323E48;
    margin: 0;
  }

  .image-description {
    font-family: 'Source Sans Pro', sans-serif;
    font-weight: 400;
    font-size: 0.875rem;
    line-height: 1.257;
    color: #323E48;
    margin: 0;
  }

  .hidden {
    display: none;
  }

  /* Tablet Layout */
  @media (min-width: 768px) and (max-width: 1023px) {

    .gallery {
      gap: 1.25rem;
    }

    .gallery-item {
      width: 18rem;
    }
  }

  /* Mobile Layout */
  @media (max-width: 767px) {
    .navigation {
      display: none;
    }

  }
</style>
