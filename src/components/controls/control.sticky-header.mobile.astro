---
import { useTranslations } from '../../lib/utils';
import { CONTACT } from '../../lib/constants';
import { getLangFromUrl, getLocalePath } from '../../lib/utils';

const lang = Astro.props.locale || getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<!-- Sticky Mobile Header -->
<header class="sticky-header-mobile" id="stickyHeaderMobile">
    <div class="sticky-header-container">
        <!-- Menu Button -->
        <button class="sticky-menu-toggle" aria-label={t('nav.menu')} id="stickyMenuToggle">
            <div class="sticky-hamburger">
                <span class="sticky-hamburger-line"></span>
                <span class="sticky-hamburger-line"></span>
                <span class="sticky-hamburger-line"></span>
            </div>
        </button>

        <!-- Logo -->
        <a href={getLocalePath(lang, '/')} class="sticky-logo">
            <img src="/images/jaukuma-logo-mobile.svg" alt={t('nav.logo.alt') || 'Jaukuma'} class="sticky-logo-image" />
        </a>

        <!-- Phone Icon -->
        <a href={`tel:${CONTACT.PHONE}`} class="sticky-phone-link" aria-label={t('nav.phone') || 'Call us'}>
            <img src="/images/phone-icon.svg" alt="Phone" class="sticky-phone-icon" />
        </a>
    </div>
</header>

<style>
    /* Sticky Mobile Header */
    .sticky-header-mobile {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 999999; /* Ensure it's above all other elements */
        background: rgba(50, 62, 72, 0.9); /* #323E48 with 90% opacity */
        border-radius: 0 0 30px 30px;
        padding: 24px;
        transform: translateY(-100%);
        -ms-transform: translateY(-100%); /* IE and Edge compatibility */
        -webkit-transform: translateY(-100%); /* Safari compatibility */
        transition: transform 0.3s ease-in-out;
        -webkit-transition: -webkit-transform 0.3s ease-in-out; /* Safari compatibility */
        -ms-transition: -ms-transform 0.3s ease-in-out; /* IE and Edge compatibility */
        will-change: transform;
        /* Only show on mobile */
        display: none;
        box-shadow: 0 4px 20px rgba(50, 62, 72, 0.3);
        /* Force new stacking context */
        isolation: isolate;
        /* Ensure it's above transformed elements */
        transform-style: preserve-3d;
        /* Add backface visibility for Edge */
        backface-visibility: hidden;
        -webkit-backface-visibility: hidden;
        -ms-backface-visibility: hidden;
    }

    .sticky-header-mobile.visible {
        transform: translateY(0);
        -ms-transform: translateY(0); /* IE and Edge compatibility */
        -webkit-transform: translateY(0); /* Safari compatibility */
    }

    /* Hide sticky header when mobile menu is open */
    .sticky-header-mobile.menu-open {
        transform: translateY(-100%) !important;
        -ms-transform: translateY(-100%) !important; /* IE and Edge compatibility */
        -webkit-transform: translateY(-100%) !important; /* Safari compatibility */
    }

    .sticky-header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        max-width: 100%;
        position: relative;
        z-index: 1;
    }

    /* Menu Button */
    .sticky-menu-toggle {
        background: none;
        border: none;
        padding: 0;
        cursor: pointer;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 25px;
        height: auto;
        transition: opacity 0.3s ease;
    }

    .sticky-menu-toggle:hover {
        opacity: 0.8;
    }

    .sticky-hamburger {
        display: flex;
        flex-direction: column;
        gap: 5px;
        width: 100%;
    }

    .sticky-hamburger-line {
        width: 100%;
        height: 3px;
        background-color: var(--color-light);
        border-radius: 1px;
        transition: all 0.3s ease;
        transform: translate3d(0, 0, 0); /* Hardware acceleration */
    }

    .sticky-menu-toggle:hover .sticky-hamburger-line {
        background-color: #D6D2C4;
    }

    /* Logo */
    .sticky-logo {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        text-decoration: none;
        transition: opacity 0.3s ease;
    }

    .sticky-logo:hover {
        opacity: 0.9;
    }

    .sticky-logo-image {
        height: 79.845px; /* Increased by 50% from 53.23px */
        width: auto;
        object-fit: contain;
    }

    /* Phone Icon */
    .sticky-phone-link {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 0.125rem; /* 2px */
        text-decoration: none;
        transition: opacity 0.3s ease;
        flex-shrink: 0;
        flex-grow: 0;
        flex-basis: auto;
    }

    .sticky-phone-link:hover {
        opacity: 0.8;
    }

    .sticky-phone-icon {
        width: 1.243125rem; /* 19.89px */
        height: 1.245625rem; /* 19.93px */
        filter: brightness(0) invert(1); /* Make icon white */
    }

    /* Mobile Only */
    @media (max-width: 768px) {
        .sticky-header-mobile {
            display: block;
        }
    }

    /* Performance optimizations */
    @supports (transform: translate3d(0, 0, 0)) {
        .sticky-header-mobile {
            transform: translate3d(0, -100%, 0);
            -webkit-transform: translate3d(0, -100%, 0); /* Safari compatibility */
            -ms-transform: translate3d(0, -100%, 0); /* IE and Edge compatibility */
        }
        
        .sticky-header-mobile.visible {
            transform: translate3d(0, 0, 0);
            -webkit-transform: translate3d(0, 0, 0); /* Safari compatibility */
            -ms-transform: translate3d(0, 0, 0); /* IE and Edge compatibility */
        }
    }

    /* Ensure sticky header is always on top */
    .sticky-header-mobile {
        z-index: 999999 !important;
        position: fixed !important;
    }
    
    /* Mobile-specific overrides for problematic elements */
    @media (max-width: 768px) {
        .sticky-header-mobile {
            z-index: 2147483647 !important; /* Maximum z-index value */
            /* Add Edge-specific positioning */
            position: -webkit-sticky;
            position: sticky;
            position: fixed;
        }
    }

    /* Reduced motion support */
    @media (prefers-reduced-motion: reduce) {
        .sticky-header-mobile {
            transition: none;
        }
        
        .sticky-hamburger-line {
            transition: none;
        }
    }

    /* Smaller mobile screens */
    @media (max-width: 640px) {
        .sticky-header-mobile {
            padding: 16px 20px;
            border-radius: 0 0 20px 20px;
        }
        
        .sticky-logo-image {
            height: 60px; /* Increased by 50% from 40px */
        }
        
        .sticky-menu-toggle {
            width: 20px;
        }
        
        .sticky-hamburger {
            gap: 4px;
        }
        
        .sticky-hamburger-line {
            height: 2px;
        }
        
        .sticky-phone-icon {
            width: 16px;
            height: 16px;
        }
    }

    /* Very small screens */
    @media (max-width: 480px) {
        .sticky-header-mobile {
            padding: 12px 16px;
            border-radius: 0 0 16px 16px;
        }
        
        .sticky-logo-image {
            height: 54px; /* Increased by 50% from 36px */
        }
    }

    /* Landscape mobile orientation */
    @media (max-width: 768px) and (orientation: landscape) {
        .sticky-header-mobile {
            padding: 12px 20px;
        }
        
        .sticky-logo-image {
            height: 54px; /* Increased by 50% from 36px */
        }
    }
</style>

<script>
    // Sticky header scroll behavior
    document.addEventListener('DOMContentLoaded', function() {
        const stickyHeader = document.getElementById('stickyHeaderMobile');
        const stickyMenuToggle = document.getElementById('stickyMenuToggle');
        const mobileMenuOverlay = document.getElementById('mobileMenuOverlay');
        
        // Check if we're on mobile
        const isMobile = () => window.innerWidth <= 768;
        
        if (!stickyHeader || !isMobile()) {
            return;
        }

        // Feature detection for Edge browser
        const isEdge = /Edge\/\d+/.test(navigator.userAgent);
        
        // Scroll threshold values
        const SHOW_THRESHOLD = 100;
        const HIDE_THRESHOLD = 50;
        
        // Track scroll state
        let lastScrollY = window.scrollY;
        let isVisible = false;
        let ticking = false; // For requestAnimationFrame optimization
        
        function handleScroll() {
            if (!stickyHeader) return;
            
            const currentScrollY = window.scrollY;
            const scrollDirection = currentScrollY > lastScrollY ? 'down' : 'up';
            
            // Show header when scrolling down past threshold
            if (scrollDirection === 'down' && currentScrollY > SHOW_THRESHOLD && !isVisible) {
                stickyHeader.classList.add('visible');
                isVisible = true;
            } 
            // Hide header when scrolling up and near top
            else if (scrollDirection === 'up' && currentScrollY < HIDE_THRESHOLD && isVisible) {
                stickyHeader.classList.remove('visible');
                isVisible = false;
            }
            // Special case for Edge: handle small scroll changes
            else if (isEdge && Math.abs(currentScrollY - lastScrollY) > 10) {
                // Force update for Edge browser which might miss scroll events
                if (currentScrollY > SHOW_THRESHOLD && !isVisible) {
                    stickyHeader.classList.add('visible');
                    isVisible = true;
                } else if (currentScrollY < HIDE_THRESHOLD && isVisible) {
                    stickyHeader.classList.remove('visible');
                    isVisible = false;
                }
            }
            
            lastScrollY = currentScrollY;
            ticking = false;
        }
        
        // Use requestAnimationFrame for better scroll performance
        function updateScroll() {
            if (!ticking) {
                requestAnimationFrame(handleScroll);
                ticking = true;
            }
        }

        // Add scroll event listener
        // For Edge browser, we might need to handle it differently
        if (isEdge) {
            // Edge sometimes needs more responsive scroll handling
            window.addEventListener('scroll', updateScroll);
        } else {
            window.addEventListener('scroll', updateScroll, { passive: true });
        }
        
        // Initial check
        handleScroll();

        // Connect sticky menu button to existing mobile menu
        if (stickyMenuToggle) {
            stickyMenuToggle.addEventListener('click', function() {
                // Trigger the existing mobile menu toggle
                const existingMenuToggle = document.getElementById('menuToggle');
                if (existingMenuToggle) {
                    existingMenuToggle.click();
                }
            });
        }

        // Monitor mobile menu state to hide/show sticky header
        if (mobileMenuOverlay) {
            // Use MutationObserver to watch for class changes on mobile menu
            const menuObserver = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                        if (mobileMenuOverlay.classList.contains('active')) {
                            stickyHeader.classList.add('menu-open');
                        } else {
                            stickyHeader.classList.remove('menu-open');
                        }
                    }
                });
            });
            
            menuObserver.observe(mobileMenuOverlay, {
                attributes: true,
                attributeFilter: ['class']
            });
        } else {
            // Mobile menu overlay not found - continue without menu integration
        }

        // Cleanup scroll listener on page unload
        window.addEventListener('beforeunload', function() {
            window.removeEventListener('scroll', updateScroll);
        });

        // Handle resize events
        window.addEventListener('resize', function() {
            if (!isMobile()) {
                stickyHeader.classList.remove('visible');
                isVisible = false;
                window.removeEventListener('scroll', updateScroll);
            } else {
                window.addEventListener('scroll', updateScroll, { passive: true });
                handleScroll();
            }
        });
    });
</script>