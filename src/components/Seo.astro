---
import { hostname, languages, defaultLang } from '../lib/constants.ts';

interface Props {
  title: string;
  description: string;
  pathname: string;
  locale: string;
  image?: string;
  type?: string;
}

const { 
  title, 
  description, 
  pathname, 
  locale, 
  image = '/images/og-default.jpg',
  type = 'website'
} = Astro.props;

const url = `https://${hostname}${pathname}`;
const imageUrl = `https://${hostname}${image}`;

// Map language codes to OpenGraph locale format
const localeMap: Record<string, string> = {
  'en': 'en_US',
  'lt': 'lt_LT',
  'ru': 'ru_RU'
};

const ogLocale = localeMap[locale] || 'en_US';

// Generate hreflang URLs
const generateHreflangUrl = (lang: string) => {
  // Remove existing locale from pathname if present
  const pathWithoutLocale = pathname.replace(/^\/(lt|en|ru)\//, '/');
  const pathWithoutLeadingSlash = pathWithoutLocale.startsWith('/') ? pathWithoutLocale.slice(1) : pathWithoutLocale;
  
  // For default language, use root path
  if (lang === defaultLang) {
    return `https://${hostname}/${pathWithoutLeadingSlash}`;
  }
  
  // For other languages, add locale prefix
  return `https://${hostname}/${lang}/${pathWithoutLeadingSlash}`;
};
---

<title>{title}</title>
<meta name="description" content={description} />

<!-- OpenGraph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={url} />
<meta property="og:image" content={imageUrl} />
<meta property="og:locale" content={ogLocale} />

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={imageUrl} />

<!-- Canonical and alternate links -->
<link rel="canonical" href={url} />

<!-- Hreflang tags for internationalization -->
{
  languages.map((lang) => (
    <link 
      rel="alternate" 
      hreflang={lang} 
      href={generateHreflangUrl(lang)} 
    />
  ))
}
<link rel="alternate" hreflang="x-default" href={generateHreflangUrl(defaultLang)} />